AWSTemplateFormatVersion: 2010-09-09
Description: Template to deploy the pipelines for SessionView

Parameters:
  DeployArtifactsBucket:
    Type: String
    Description: S3 Bucket for Artifact storage
    Default: suspicious-ticket

  RuntimeRepositoryName:
    Type: String
    Description: Name of the code commit repository for the runtime component
    Default: session-view-runtime
  RuntimePipelineStack:
    Type: String
    Description: The codepipeline stack for Runtime
    Default: session-view-runtime-pipeline
  RuntimePipelineTemplate:
    Type: String
    Description: The template file for the session view runtime pipeline
    Default: cloudformation/pipeline.yml

  VPCRepositoryName:
    Type: String
    Description: Name of the code commit repository for the VPC component
    Default: session-view-vpc
  VPCPipelineStack:
    Type: String
    Description: The codepipeline stack for VPC
    Default: session-view-vpc-pipeline
  VPCPipelineTemplate:
    Type: String
    Description: The template file for the session view VPC pipeline
    Default: cloudformation/pipeline.yml

  UserCreatorRepositoryName:
    Type: String
    Description: Name of the code commit repository for the UserCreator component
    Default: session-view-user-creator
  UserCreatorPipelineStack:
    Type: String
    Description: Stack name for the resulting SessionView UserCreator stack
    Default: session-view-user-creator-pipeline
  UserCreatorPipelineTemplate:
    Type: String
    Description: The template file for the session view UserCreator pipeline
    Default: cloudformation/pipeline.yml

  ADRepositoryName:
    Type: String
    Description: Name of the code commit repository for the AD component
    Default: session-view-active-directory
  ADPipelineStack:
    Type: String
    Description: Stack name for the resulting SessionView AD stack
    Default: session-view-active-directory-pipeline
  ADPipelineTemplate:
    Type: String
    Description: The template file for the session view AD pipeline
    Default: cloudformation/pipeline.yml

  MQRepositoryName:
    Type: String
    Description: Name of the code commit repository for the MQ component
    Default: session-view-mq
  MQPipelineStack:
    Type: String
    Description: Stack name for the resulting user creator pipeline
    Default: session-view-mq-pipeline
  MQPipelineTemplate:
    Type: String
    Description: The template file for the user creator pipeline
    Default: cloudformation/pipeline.yml

Resources:
  CloudformationDeploymentRole: 
    Type: AWS::IAM::Role
    Properties: 
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: 
                - cloudformation.amazonaws.com
      Policies: 
        - PolicyName: CloudformationDeployPolicy
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: Allow
                Action:
                  - codepipeline:*
                  - codebuild:*
                  - iam:*
                  - sns:*
                  - lambda:*
                Resource: '*'

  CodePipelineServiceRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: 
                - codepipeline.amazonaws.com
      Policies: 
        - PolicyName: CodePipelineService
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: Allow
                Action:
                  - s3:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - codecommit:CancelUploadArchive
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:UploadArchive
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudformation:*
                  - iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:ListFunctions
                Resource: '*'
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: '*'

  PipelinesPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: session-view-base-pipeline
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref DeployArtifactsBucket
      Stages:
        # These are the runtime component source/build/test/deploy stages
        - Name: Source
          Actions:
            - Name: VPCSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: "1"
              Configuration:
                RepositoryName: !Ref VPCRepositoryName
                BranchName: master
              OutputArtifacts:
                - Name: VPCSourceZip
              RunOrder: 1
            - Name: ADSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: "1"
              Configuration:
                RepositoryName: !Ref ADRepositoryName
                BranchName: master
              OutputArtifacts:
                - Name: ADSourceZip
              RunOrder: 1
            - Name: UserCreatorSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: "1"
              Configuration:
                RepositoryName: !Ref UserCreatorRepositoryName
                BranchName: master
              OutputArtifacts:
                - Name: UserCreatorSourceZip
              RunOrder: 1
            - Name: MQSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: "1"
              Configuration:
                RepositoryName: !Ref MQRepositoryName
                BranchName: master
              OutputArtifacts:
                - Name: MQSourceZip
              RunOrder: 1
            - Name: RuntimeSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: "1"
              Configuration:
                RepositoryName: !Ref RuntimeRepositoryName
                BranchName: master
              OutputArtifacts:
                - Name: RuntimeSourceZip
              RunOrder: 1

        - Name: DeployVPC
          Actions:
            - Name: VpcPipelineCreateChangeset
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              InputArtifacts:
                - Name: VPCSourceZip
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                ChangeSetName: !Ref "AWS::StackName"
                StackName: !Ref VPCPipelineStack
                RoleArn: !GetAtt CloudformationDeploymentRole.Arn
                Capabilities: CAPABILITY_IAM
                TemplatePath: !Sub VPCSourceZip::${VPCPipelineTemplate}
              RunOrder: 1
            - Name: VpcPipelineExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              InputArtifacts:
                - Name: VPCSourceZip
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: !Ref "AWS::StackName"
                StackName: !Ref VPCPipelineStack
                RoleArn: !GetAtt CloudformationDeploymentRole.Arn
                Capabilities: CAPABILITY_IAM
                TemplatePath: !Sub VPCSourceZip::${VPCPipelineTemplate}
              RunOrder: 2

        - Name: DeployAD
          Actions:
            - Name: ADPipelineCreateChangeset
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              InputArtifacts:
                - Name: ADSourceZip
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                ChangeSetName: !Ref "AWS::StackName"
                StackName: !Ref ADPipelineStack
                RoleArn: !GetAtt CloudformationDeploymentRole.Arn
                Capabilities: CAPABILITY_IAM
                TemplatePath: !Sub ADSourceZip::${ADPipelineTemplate}
              RunOrder: 1
            - Name: ADPipelineExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              InputArtifacts:
                - Name: ADSourceZip
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: !Ref "AWS::StackName"
                StackName: !Ref ADPipelineStack
                RoleArn: !GetAtt CloudformationDeploymentRole.Arn
                Capabilities: CAPABILITY_IAM
                TemplatePath: !Sub ADSourceZip::${ADPipelineTemplate}
              RunOrder: 2

        - Name: DeployUserCreator
          Actions:
            - Name: UserCreatorPipelineCreateChangeset
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              InputArtifacts:
                - Name: UserCreatorSourceZip
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                ChangeSetName: !Ref "AWS::StackName"
                StackName: !Ref UserCreatorPipelineStack
                RoleArn: !GetAtt CloudformationDeploymentRole.Arn
                Capabilities: CAPABILITY_IAM
                TemplatePath: !Sub UserCreatorSourceZip::${UserCreatorPipelineTemplate}
              RunOrder: 1
            - Name: UserCreatorPipelineExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              InputArtifacts:
                - Name: UserCreatorSourceZip
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: !Ref "AWS::StackName"
                StackName: !Ref UserCreatorPipelineStack
                RoleArn: !GetAtt CloudformationDeploymentRole.Arn
                Capabilities: CAPABILITY_IAM
                TemplatePath: !Sub UserCreatorSourceZip::${UserCreatorPipelineTemplate}
              RunOrder: 2

        - Name: DeployMQ
          Actions:
            - Name: MQPipelineCreateChangeset
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              InputArtifacts:
                - Name: MQSourceZip
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                ChangeSetName: !Ref "AWS::StackName"
                StackName: !Ref MQPipelineStack
                RoleArn: !GetAtt CloudformationDeploymentRole.Arn
                Capabilities: CAPABILITY_IAM
                TemplatePath: !Sub MQSourceZip::${MQPipelineTemplate}
              RunOrder: 1
            - Name: MQPipelineExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              InputArtifacts:
                - Name: MQSourceZip
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: !Ref "AWS::StackName"
                StackName: !Ref MQPipelineStack
                RoleArn: !GetAtt CloudformationDeploymentRole.Arn
                Capabilities: CAPABILITY_IAM
                TemplatePath: !Sub MQSourceZip::${MQPipelineTemplate}
              RunOrder: 2

        - Name: DeployRuntime
          Actions:
            - Name: RuntimePipelineCreateChangeset
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              InputArtifacts:
                - Name: RuntimeSourceZip
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                ChangeSetName: !Ref "AWS::StackName"
                StackName: !Ref RuntimePipelineStack
                RoleArn: !GetAtt CloudformationDeploymentRole.Arn
                Capabilities: CAPABILITY_IAM
                TemplatePath: !Sub RuntimeSourceZip::${RuntimePipelineTemplate}
              RunOrder: 1
            - Name: RuntimePipelineExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              InputArtifacts:
                - Name: RuntimeSourceZip
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: !Ref "AWS::StackName"
                StackName: !Ref RuntimePipelineStack
                RoleArn: !GetAtt CloudformationDeploymentRole.Arn
                Capabilities: CAPABILITY_IAM
                TemplatePath: !Sub RuntimeSourceZip::${RuntimePipelineTemplate}
              RunOrder: 2

  # Common Lambda mechanism for blocking one pipeline until another has completed
  ApprovalTopic:
    Type: AWS::SNS::Topic
    Properties: {}

  ApprovalSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref ApprovalTopic
      Protocol: lambda
      Endpoint: !GetAtt ApprovalLambda.Arn

  SNSPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      Principal: sns.amazonaws.com
      FunctionName: !Ref ApprovalLambda
      SourceArn: !Ref ApprovalTopic

  ApprovalWaiterTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: PipelineToken    # the generated approval token
          AttributeType: S
      KeySchema:
        - AttributeName: PipelineToken
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - codepipeline:PutApprovalResult
                  - codepipeline:GetPipelineState
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: "*"

  ApprovalWaiterPoll:
    Type: AWS::Events::Rule
    Properties:
      Description: Poll for pending pipeline stage approvals
      ScheduleExpression: 'rate(1 minute)'
      State: ENABLED
      Targets:
        - Id: ApprovalPollerLambda
          Arn: !GetAtt ApprovalPollerFunction.Arn

  ApprovalWaiterPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ApprovalPollerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ApprovalWaiterPoll.Arn

  # This function is used by cloudwatch events to process checks against pipelines
  # that aren't finished yet; don't invoke this one directly, use the ApprovalLambda
  # below
  ApprovalPollerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.6
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref ApprovalWaiterTable
      Code:
        ZipFile: |
          import boto3
          import json
          import os

          def pipeline_status(cp, pipeline):
            try:
              res = cp.get_pipeline_state(name=pipeline)
              statuses = [ stage['latestExecution']['status'] for stage in res['stageStates'] ]
              print(f'pipeline {pipeline} has statuses {statuses}')
              if 'Failed' in statuses:
                return 'Failed'
                
              if 'InProgress' in statuses:
                return 'InProgress'
                
              return 'Succeeded'
            except:
              return 'Unknown'

            return status

          def process(cp, item):
            it = item['CheckPipeline']['S']
            me = item['PipelineName']['S']
            state = pipeline_status(cp, it)
            if not state in ['Succeeded', 'Failed']:
              print(f'pipeline {me} waiting for pipeline {it}: still in state {state}')
              return False

            if state == 'Succeeded':
              summary = 'Approved by ApprovalWaiter after polling'
              status = 'Approved'
            else:
              summary = 'Rejected by ApprovalWaiter after polling'
              status = 'Rejected'

            print(f'Putting approval result {status} with summary {summary}')

            cp.put_approval_result(
              pipelineName=item['PipelineName']['S'],
              stageName=item['PipelineStage']['S'],
              actionName=item['PipelineAction']['S'],
              token=item['PipelineToken']['S'],
              result={
                'summary': summary,
                'status': status
              }
            )

            return True

          def lambda_handler(event, context):
            dynamodb = boto3.client('dynamodb')
            items = dynamodb.scan(TableName=os.getenv('TABLE_NAME'))
            if items['Count'] < 1:
              print("No items to process, exiting")
              return

            cp = boto3.client('codepipeline')
            for item in items['Items']:
              if process(cp, item):
                resp = dynamodb.delete_item(
                  TableName=os.getenv('TABLE_NAME'),
                  Key={
                    'PipelineToken': { 'S': item['PipelineToken']['S'] }
                  }
                )
                print(f"Deleted item for {item['PipelineName']['S']}")

  # Invoke this as an Approval stage in a pipeline, using:
  #   Configuration:
  #     NotificationArn: !ImportValue PipelineApprovalTopic
  #     CustomData: <name of pipeline to wait for>
  ApprovalLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.6
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref ApprovalWaiterTable
      Code:
        ZipFile: |
          import boto3
          import json
          import os

          cp = boto3.client('codepipeline')

          def pipeline_status(pipeline):
            try:
              res = cp.get_pipeline_state(name=pipeline)
              statuses = [ stage['latestExecution']['status'] for stage in res['stageStates'] ]
              print(f'pipeline {pipeline} has statuses {statuses}')
              if 'Failed' in statuses:
                return 'Failed'
                
              if 'InProgress' in statuses:
                return 'InProgress'
                
              return 'Succeeded'
            except:
              return 'Unknown'

            return status

          def lambda_handler(event, context):
            print(f'Got event: {event}')
            msg = json.loads(event['Records'][0]['Sns']['Message'])
            token = msg['approval']['token']
            pipeline_to_check = msg['approval']['customData']
            state = pipeline_status(pipeline_to_check)

            summary = f'Pipeline {pipeline_to_check} is in state {state}'

            if state == 'Succeeded':
              summary = f'Pipeline {pipeline_to_check} has succeeded, proceeding'
              status = 'Approved'
            elif state == 'Failed':
              summary = f'Pipeline {pipeline_to_check} has failed, proceeding'
              status = 'Rejected'
            else: # still in progress or something else
              dynamodb = boto3.client('dynamodb')
              table = os.getenv('TABLE_NAME')
              resp = dynamodb.put_item(
                TableName=table,
                Item={
                  'PipelineToken': { 'S': msg['approval']['token'] },
                  'CheckPipeline': { 'S': pipeline_to_check },
                  'PipelineName': { 'S': msg['approval']['pipelineName'] },
                  'PipelineStage': { 'S': msg['approval']['stageName'] },
                  'PipelineAction': { 'S': msg['approval']['actionName'] }
                }
              )
              print(f'Postponing approval; put {resp} into waiter table')
              return

            print(summary)
            cp.put_approval_result(
              pipelineName=msg['approval']['pipelineName'],
              stageName=msg['approval']['stageName'],
              actionName=msg['approval']['actionName'],
              token=msg['approval']['token'],
              result={
                'summary': summary,
                'status': status
              }
            )

Outputs:
  PipelineApprovalTopic:
    Value: !Ref ApprovalTopic
    Export:
      Name: PipelineApprovalTopic
